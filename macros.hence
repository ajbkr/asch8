__stklen__
  [return] '32'

[ popb -- pop a byte from the stack (into V0) ]
popb
	ld-i	address '__stk__'
	add-i	ve
	st-mi	v0
	addi	ve '1'

[ popw -- pop a word from the stack (into V0:V1) ]
popw
	ld-i	address '__stk__'
	add-i	ve
	st-mi	v1
	addi	ve '2'

[ pushb -- push a byte (in V0) onto the stack ]
pushb
	ld-i	address '__stk__'
	addi	ve '255'	[ VE = VE - 1 ]
	add-i	ve
	ld-mi	v0

[ pushw -- push a word (in V0:V1) onto the stack ]
pushw
	ld-i	address '__stk__'
	addi	ve '254'	[ VE = VE - 2 ]
	add-i	ve
	ld-mi	v1

[ prolog-n -- function prologue (make stack frame for procedure parameters) ]
[ -- $1 ]
_S1-is-not-zero
  [compare $1 and] '0'
  [return $1 is] not-equal [to 0]
_subtract-S1-from-256
  subtract swap [$1 from] '256'
prolog-n
	ld	v0 vd
	pushb			[ push frame pointer ]
	ld	vd ve		[ assign stack pointer to frame pointer ]

  duplicate [$1]
  if '_S1-is-not-zero' '_subtract-S1-from-256' [else] 'do-nothing'
	add-i	ve [TOS]	[ allocate local vars (VE = VE - $1) ]

[ prolog -- function prologue (DON'T reserve stack space for local vars) ]
prolog
  prolog-n '0'

[ epilog -- function epilogue (high level procedure exit) ]
epilog
	ld	ve vd	[ assign frame pointer to stack pointer ]
	popb		[ pop frame pointer ]
	ld	vd v0
	ret

[ fpeekb -- get a byte relative to frame pointer (into V0) ]
[ -- $1 ]
_S1-is-negative
  [compare] swap [$1 and] '0'
  [return $1 is] less-than [0]
_add-256-and-S1
  add '256' [and $1]
fpeekb
	ld-i	address '__stk__'

  duplicate [$1]
  if '_S1-is-negative' '_add-256-and-S1' [else] 'do-nothing'
	ldi	vc [TOS]

	add_	vc vd
	add-i	vc
	st-mi	v0

[ fpeekw -- get a word relative to frame pointer (into V0:V1) ]
[ -- $1 ]
fpeekw
	ld-i	address '__stk__'

  duplicate [$1]
  if '_S1-is-negative' '_add-256-and-S1' [else] 'do-nothing'
	ldi	vc [TOS]

	add_	vc vd
	add-i	vc
	st-mi	v1

[ fpokeb -- set a byte (held in V0) relative to frame pointer ]
[ -- $1 ]
fpokeb
	ld-i	address '__stk__'

  duplicate [$1]
  if '_S1-is-negative' '_add-256-and-S1' [else] 'do-nothing'
	ldi	vc [TOS]

	add_	vc vd
	add-i	vc
	ld-mi	v0

[ fpokew -- set a word (held in V0:V1) relative to frame pointer ]
[ -- $1 ]
fpokew
	ld-i	address '__stk__'

  duplicate [$1]
  if '_S1-is-negative' '_add-256-and-S1' [else] 'do-nothing'
	ldi	vc [TOS]

	add_	vc vd
	add-i	vc
	ld-mi	v1

init-macros
 label 'start'
	ldi	ve __stklen__	[ initialise stack pointer ]

	call_	address 'main'

 label 'halt'
	jp	address 'halt'

 label '__stk__'
	db	'0'
	db	'0'
	db	'0'
	db	'0'
	db	'0'
	db	'0'
	db	'0'
	db	'0'
	db	'0'
	db	'0'
	db	'0'
	db	'0'
	db	'0'
	db	'0'
	db	'0'
	db	'0'
	db	'0'
	db	'0'
	db	'0'
	db	'0'
	db	'0'
	db	'0'
	db	'0'
	db	'0'
	db	'0'
	db	'0'
	db	'0'
	db	'0'
	db	'0'
	db	'0'
	db	'0'
	db	'0'
